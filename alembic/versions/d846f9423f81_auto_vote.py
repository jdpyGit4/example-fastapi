"""auto-vote

Revision ID: d846f9423f81
Revises: e0a57df59579
Create Date: 2024-04-10 16:16:04.885744

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'd846f9423f81'
down_revision: Union[str, None] = 'e0a57df59579'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

# 146.) And so we can see here, the changes where it looks like it's going to create the "votes" table, like the author
#   predicted it, it's creating the two columns, and then it's going to add the "primary key" constraint as well as the
#   two "foreign keys" constraint as well. And it's going to even add in all of the "on delete" properties and things like
#   that. And so, all we got do now is do an "alembic upgrade head". And now if we refresh our Postgres, and go to "votes"
#   table, and properties, we should have the two columns, and then our constraints and foreign keys look pretty good,
#   everything looks set. And so that's how easy it was. So no matter what state your database at any point in time, we can
#   always do the "--autogenerate" functionality to get it back to a state that our code expects it to be. And the best part
#   about this is moving foward, let's say we want to go back to our "models.py" and we want to change something. So we've got
#   our "User" model this time, we're going to add that "phone number" column (This will be 148). And this is going to be string. 
#   So any changes we make, even on a table that already exists, what we can do now is we can do "alembic revision --autogenerate"
def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('votes',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('post_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'post_id')
    )
    # ### end Alembic commands ###

# 148.) So it automatically generate the lines for "downgrade".
def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('votes')
    # ### end Alembic commands ###
